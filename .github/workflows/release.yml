name: Publish Artifacts and Release Documentation

on:
  workflow_dispatch:
    inputs:
      release:
        description: Is release? (Will create tag and update version)
        required: true
        default: false
        type: boolean
      release-version:
        description: Released version (x.y.z)
        required: true
        type: string
      next-version:
        description: Next version (x.y.z)
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail'
  JF_URL: 'http://localhost:8081'
  OIDC_PROVIDER: 'github'
  OIDC_AUDIENCE: 'github-workflows'

jobs:
  ci:
    uses: ./.github/workflows/ci.yml

  ci-low-cadence:
    uses: ./.github/workflows/ci-low-cadence.yml

  codeql:
    uses: ./.github/workflows/codeql.yml

  pre-release:
    name: Update version, tag repo, and return sha
    permissions:
      contents: write
    needs: [ ci, ci-low-cadence, codeql ]
    runs-on: self-hosted
    outputs:
      sha: ${{ steps.return-details.outputs.sha }}
      version: ${{ steps.return-details.outputs.version }}
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - id: validate
        name: Validate no new commits
        run: |
          current_sha=$(git rev-parse HEAD)
          if test $current_sha != '${{ github.sha }}'
          then exit 1
          fi
      - id: tag-version
        if: ${{ inputs.release }}
        name: Update version and tag repo
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@aeron.io"
          echo ${{ inputs.release-version }} > version.txt
          git add version.txt
          git status
          git commit -m "${{ inputs.release-version }} version update."
          git push
          git tag ${{ inputs.release-version }}
          git push origin refs/tags/${{ inputs.release-version }}
      - id: return-details
        name: Return current SHA and version
        run: |
          git rev-parse HEAD
          cat version.txt
          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          echo "version=$(cat version.txt)" >> "$GITHUB_OUTPUT"

  release-java:
    name: Release java artifacts
    permissions:
      contents: read
      packages: write
    needs: pre-release
    runs-on: [ self-hosted ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-release.outputs.sha }}
      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 8
      - name: Setup BUILD_JAVA_HOME & BUILD_JAVA_VERSION
        run: |
          java -Xinternalversion
          echo "BUILD_JAVA_HOME=${JAVA_HOME}" >> $GITHUB_ENV
          echo "BUILD_JAVA_VERSION=8" >> $GITHUB_ENV
      - name: Publish with Gradle
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.ossrhUsername }}
          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.ossrhPassword }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.signingKey }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.signingPassword }}
#      - name: Build with Gradle
#        run: ./gradlew tutorialPublish -Paeron.ci.apiKey=${{ secrets.WIKI_PAGE_TOKEN }} --stacktrace

  release-c:
    name: Release c artifacts
    permissions:
      contents: read
      id-token: write
      packages: write
    needs: pre-release
    runs-on: [ self-hosted ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - distro: ubuntu
            version: 20.04
          - distro: ubuntu
            version: 22.04
          - distro: debian
            version: bullseye
          - distro: debian
            version: bookworm
          - distro: rocky
            version: 8.9
          - distro: awslinux
            version: 2023
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-release.outputs.sha }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Artifacts Using Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./cppbuild/${{ matrix.distro }}/Dockerfile
          pull: true
          shm-size: 1g
          outputs: build/${{ matrix.distro }}/${{ matrix.version }}
          target: essentials-artifacts
          build-args: VERSION=${{ matrix.version }}
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          oidc-provider-name: ${{ env.OIDC_PROVIDER }}
          oidc-audience: ${{ env.OIDC_AUDIENCE }}
      - name: Publish Build info With JFrog CLI
        run: |
          mv *.tar.gz aeron-${{ needs.pre-release.outputs.version }}-${{ matrix.distro }}-${{ matrix.version }}.tar.gz
          jf rt u *.tar.gz ${{ inputs.release && 'generic-local/' || 'generic-local/' }}
        working-directory: ./build/${{ matrix.distro }}/${{ matrix.version }}

  post-release:
    name: Update version
    permissions:
      contents: write
    needs: [ release-java, release-c ]
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Commit snapshot version to current branch
        if: ${{ inputs.release }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@aeron.io"
          echo ${{ inputs.next-version }}-SNAPSHOT > version.txt
          git add version.txt
          git status
          git commit -m "${{ inputs.next-version }}-SNAPSHOT version update."
          git push
